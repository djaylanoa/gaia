import sqlite3
from cryptography.fernet import Fernet

# Define access levels
ACCESS_LEVELS = {
    "Alpha Prime": 3,  
    "Alpha": 2, 
    "Beta": 1,  
    "Gamma": 0  
}

# List of allowed users
ALLOWED_USERS = {
    "Djaylano Asper",
    "Kaj Hogewoning"
}

# Create SQLite database connection
conn = sqlite3.connect("secure_files.db")
cursor = conn.cursor()

# Initialize encryption keys and ciphers
def init_keys():
    cursor.execute('''CREATE TABLE IF NOT EXISTS encryption_keys
                     (clearance_level TEXT PRIMARY KEY, key TEXT)''')
    
    # Check if keys exist
    cursor.execute("SELECT * FROM encryption_keys")
    existing_keys = {row[0]: row[1] for row in cursor.fetchall()}
    
    KEYS = {}
    for level in ACCESS_LEVELS:
        if level not in existing_keys:
            # Generate new key if not exists
            key = Fernet.generate_key()
            cursor.execute("INSERT INTO encryption_keys VALUES (?, ?)", (level, key.decode()))
            KEYS[level] = key
        else:
            KEYS[level] = existing_keys[level].encode()
    
    conn.commit()
    return {level: Fernet(KEYS[level]) for level in KEYS}

# Load encryption ciphers
CIPHERS = init_keys()

# Create table for encrypted files
cursor.execute('''
    CREATE TABLE IF NOT EXISTS files (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        filename TEXT,
        encrypted_data BLOB,
        clearance_level TEXT
    )
''')
conn.commit()

# Step 1: Authenticate user
while True:
    name = input("Enter your full name (or type 'exit' to quit): ").strip()
    if name.lower() == "exit":
        print("Goodbye!")
        conn.close()
        exit()

    clearance = input("Enter your clearance level (Alpha Prime, Alpha, Beta, Gamma): ").strip()

    if clearance not in ACCESS_LEVELS or name not in ALLOWED_USERS:
        print("‚ùå Access denied! Invalid clearance level or unauthorized user.")
    else:
        print(f"‚úÖ Welcome, {name}. Your clearance level is: {clearance}")
        break  # Exit loop when authentication is successful

# Step 2: Main menu loop
while True:
    action = input("\nType 'C' to create a file, 'R' to retrieve a file, or 'Q' to quit: ").strip().upper()

    if action == 'Q':
        print("Goodbye!")
        break

    elif action == 'C':
        # CREATE & ENCRYPT FILE
        filename = input("Enter a name for the file: ").strip()
        content = input("Enter the file content: ")

        # Encrypt the content based on the user's clearance level
        encrypted_content = CIPHERS[clearance].encrypt(content.encode())

        # Store in database
        cursor.execute("INSERT INTO files (filename, encrypted_data, clearance_level) VALUES (?, ?, ?)", 
                      (filename, encrypted_content, clearance))
        conn.commit()
        print(f"‚úÖ File '{filename}' has been encrypted and stored.")

    elif action == 'R':
        # RETRIEVE & DECRYPT FILE
        print("\nüîé Checking available files...")
        cursor.execute("SELECT filename, encrypted_data, clearance_level FROM files")
        files = cursor.fetchall()

        available_files = [file for file in files if ACCESS_LEVELS[clearance] >= ACCESS_LEVELS[file[2]]]

        if not available_files:
            print("‚ö† No files available for your clearance level.")
        else:
            print("\nAvailable files:")
            for file in available_files:
                print(f"- {file[0]} (Clearance: {file[2]})")

            filename = input("\nEnter the file name you want to retrieve: ").strip()

            # Fetch the selected file
            cursor.execute("SELECT encrypted_data, clearance_level FROM files WHERE filename = ?", (filename,))
            file = cursor.fetchone()

            if file:
                file_data, file_clearance = file

                if ACCESS_LEVELS[clearance] >= ACCESS_LEVELS[file_clearance]:
                    try:
                        decrypted_content = CIPHERS[file_clearance].decrypt(file_data).decode()
                        print("\nüìÑ Decrypted File Content:")
                        print(decrypted_content)
                    except:
                        print("‚ö† Error decrypting file.")
                else:
                    print("‚ùå Access denied! Your clearance level is too low.")
            else:
                print("‚ùå File not found.")

    else:
        print("‚ö† Invalid option! Please type 'C', 'R', or 'Q'.")

# Close database connection
conn.close()
